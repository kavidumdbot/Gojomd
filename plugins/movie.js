// commands/movie.js ‚Äì brand‚Äëtagged result card version
// Requirements: axios, node-cache

const l = console.log;
const config = require('../settings');
const { cmd } = require('../lib/command');
const axios = require('axios');
const NodeCache = require('node-cache');

const searchCache = new NodeCache({ stdTTL: 60, checkperiod: 120 });

// WhatsApp document-card ‡∂ë‡∂ö‡∑ö ‡∂Ø‡∑í‡∑É‡∑ä‡∑Ä‡∂± brand watermark ‡∂ë‡∂ö
const BRAND = '‚ú´‚òòùêÜùêéùêâùêé ùêåùêéùêïùêàùêÑ ùêáùêéùêåùêÑ‚ò¢Ô∏è‚òò';

cmd(
  {
    pattern: 'movie',
    react: 'üé¨',
    desc: 'Search and download Movies/TV Series',
    category: 'media',
    filename: __filename,
  },
  async (conn, mek, m, { from, q }) => {
    // User ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è search term ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑î‡∂±‡∑ä‡∂±‡∑ô ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä usage info ‡∂ë‡∂ö show ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
    if (!q) {
      await conn.sendMessage(
        from,
        {
          text:
            '*üé¨ Movie / TV Series Search*\n\n' +
            'üìã Usage: .movie <search term>\n' +
            'üìù Example: .movie Breaking Bad\n\n' +
            "üí° Reply 'done' to stop the process",
        },
        { quoted: mek }
      );
      return;
    }

    try {
      // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. Search with cache ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      const cacheKey = `film_${q.toLowerCase()}`;
      let data = searchCache.get(cacheKey);

      if (!data) {
        const url = `https://apis.davidcyriltech.my.id/movies/search?query=${encodeURIComponent(q)}`;
        let retries = 3;

        while (retries--) {
          try {
            const r = await axios.get(url, { timeout: 10000 });
            data = r.data;
            break;
          } catch (e) {
            if (!retries) throw new Error('Failed to retrieve data');
            await new Promise((r) => setTimeout(r, 1000));
          }
        }

        if (!data?.status || !data.results?.length)
          throw new Error('No results found.');

        searchCache.set(cacheKey, data);
      }

      // results array ‡∂ë‡∂ö process ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
      const films = data.results.map((f, i) => ({
        n: i + 1,
        title: f.title,
        imdb: f.imdb,
        year: f.year,
        link: f.link,
        image: f.image,
      }));

      // results text ‡∂ë‡∂ö build ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
      let txt = '*üé¨ SEARCH RESULTS*\n\n';
      for (const f of films) {
        txt += `üé• ${f.n}. *${f.title}*\n   ‚≠ê IMDB: ${f.imdb}\n   üìÖ Year: ${f.year}\n\n`;
      }
      txt += 'üî¢ Select number ‚Ä¢ "done" to cancel';

      // first message ‡∂ë‡∂ö send ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (image ‡∑É‡∑Ñ caption ‡∑É‡∂∏‡∂ü)
      const listMsg = await conn.sendMessage(
        from,
        { image: { url: films[0].image }, caption: txt },
        { quoted: mek }
      );

      const waiting = new Map();

      // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Message handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      const handler = async ({ messages }) => {
        const msg = messages?.[0];
        if (!msg?.message?.extendedTextMessage) return;
        const body = msg.message.extendedTextMessage.text.trim();
        const replyTo = msg.message.extendedTextMessage.contextInfo?.stanzaId;

        // Cancel command ‡∂ë‡∂ö handle ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
        if (body.toLowerCase() === 'done') {
          conn.ev.off('messages.upsert', handler);
          waiting.clear();
          await conn.sendMessage(from, { text: '‚úÖ Cancelled.' }, { quoted: msg });
          return;
        }

        // First step: user film ‡∂ë‡∂ö ‡∂≠‡∑ù‡∂ª‡∂±‡∑Ä‡∑è
        if (replyTo === listMsg.key.id) {
          const film = films.find((f) => f.n === parseInt(body));
          if (!film) {
            await conn.sendMessage(from, { text: '‚ùå Invalid number.' }, { quoted: msg });
            return;
          }

          // download links fetch ‡∂ö‡∂ª‡∂± API ‡∂ë‡∂ö‡∂ß request ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
          const lUrl = `https://apis.davidcyriltech.my.id/movies/download?url=${encodeURIComponent(film.link)}`;
          let dl;
          let r = 3;
          while (r--) {
            try {
              dl = (await axios.get(lUrl, { timeout: 10000 })).data;
              if (!dl.status) throw new Error();
              break;
            } catch {
              if (!r) {
                await conn.sendMessage(from, { text: '‚ùå Fetch failed.' }, { quoted: msg });
                return;
              }
              await new Promise((d) => setTimeout(d, 1000));
            }
          }

          const links = dl.movie.download_links;

          // Video quality pick list ‡∂ë‡∂ö generate ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
          const picks = [];
          const sd = links.find((x) => x.quality === 'SD 480p' && x.direct_download);
          const hd =
            links.find((x) => x.quality === 'HD 720p' && x.direct_download) ||
            links.find((x) => x.quality === 'FHD 1080p' && x.direct_download);

          if (sd) picks.push({ n: 1, q: 'SD', ...sd });
          if (hd) picks.push({ n: 2, q: 'HD', ...hd });

          if (!picks.length) {
            await conn.sendMessage(from, { text: '‚ùå No links.' }, { quoted: msg });
            return;
          }

          // quality select ‡∂ö‡∂ª‡∂±‡∑ä‡∂± text ‡∂ë‡∂ö build ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
          let qTxt = `*üé¨ ${film.title}*\n\nüì• Choose Quality:\n\n`;
          for (const p of picks) qTxt += `${p.n}. *${p.q}* (${p.size})\n`;
          qTxt += '\nüî¢ Reply number ‚Ä¢ "done" to cancel';

          const qMsg = await conn.sendMessage(
            from,
            { image: { url: dl.movie.thumbnail || film.image }, caption: qTxt },
            { quoted: msg }
          );

          waiting.set(qMsg.key.id, { film, picks });
          return;
        }

        // Second step: user quality ‡∂ë‡∂ö ‡∂≠‡∑ù‡∂ª‡∂±‡∑Ä‡∑è
        if (waiting.has(replyTo)) {
          const { film, picks } = waiting.get(replyTo);
          const pick = picks.find((p) => p.n === parseInt(body));
          if (!pick) {
            await conn.sendMessage(from, { text: '‚ùå Wrong quality.' }, { quoted: msg });
            return;
          }

          // file size check ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (2GB‡∂ß ‡∑Ä‡∑ê‡∂©‡∑í ‡∂±‡∂∏‡∑ä direct link share ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è)
          const sz = pick.size.toLowerCase();
          const gb = sz.includes('gb') ? parseFloat(sz) : parseFloat(sz) / 1024;
          if (gb > 2) {
            await conn.sendMessage(
              from,
              { text: `‚ö†Ô∏è Too large. Direct link:\n${pick.direct_download}` },
              { quoted: msg }
            );
            return;
          }

          // safe filename ‡∂ë‡∂ö generate ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
          const safe = film.title.replace(/[\\/:*?"<>|]/g, '');
          const fname = `${BRAND} ‚Ä¢ ${safe} ‚Ä¢ ${pick.q}.mp4`;

          try {
            await conn.sendMessage(
              from,
              {
                document: { url: pick.direct_download },
                mimetype: 'video/mp4',
                fileName: fname,
                caption: `üé¨ *${film.title}*\nüìä Size: ${pick.size}\n\nüî• ${BRAND}`,
              },
              { quoted: msg }
            );
            await conn.sendMessage(from, { react: { text: '‚úÖ', key: msg.key } });
          } catch {
            await conn.sendMessage(
              from,
              { text: `‚ùå Failed. Direct link:\n${pick.direct_download}` },
              { quoted: msg }
            );
          }
        }
      };

      // WhatsApp messages.upsert event ‡∂ë‡∂ö‡∂ß handler ‡∂ë‡∂ö register ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
      conn.ev.on('messages.upsert', handler);
    } catch (e) {
      console.error(e);
      await conn.sendMessage(from, { text: `‚ùå Error: ${e.message}` }, { quoted: mek });
    }
  }
);
